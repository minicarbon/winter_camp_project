// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_load_weight_pro (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        input_size_axi,
        weights_din,
        weights_full_n,
        weights_write,
        strm_in_V_TDATA,
        strm_in_V_TVALID,
        strm_in_V_TREADY,
        weight_num_axi,
        photo_in_V_din,
        photo_in_V_full_n,
        photo_in_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] input_size_axi;
output  [31:0] weights_din;
input   weights_full_n;
output   weights_write;
input  [31:0] strm_in_V_TDATA;
input   strm_in_V_TVALID;
output   strm_in_V_TREADY;
input  [31:0] weight_num_axi;
output  [31:0] photo_in_V_din;
input   photo_in_V_full_n;
output   photo_in_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg weights_write;
reg photo_in_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] strm_in_V_0_data_out;
wire    strm_in_V_0_vld_in;
wire    strm_in_V_0_vld_out;
wire    strm_in_V_0_ack_in;
reg    strm_in_V_0_ack_out;
reg   [31:0] strm_in_V_0_payload_A;
reg   [31:0] strm_in_V_0_payload_B;
reg    strm_in_V_0_sel_rd;
reg    strm_in_V_0_sel_wr;
wire    strm_in_V_0_sel;
wire    strm_in_V_0_load_A;
wire    strm_in_V_0_load_B;
reg   [1:0] strm_in_V_0_state;
wire    strm_in_V_0_state_cmp_full;
reg    weights_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln81_fu_115_p2;
wire   [0:0] icmp_ln84_fu_126_p2;
reg    strm_in_V_TDATA_blk_n;
reg    photo_in_V_blk_n;
reg    ap_block_state1;
wire   [30:0] i_fu_120_p2;
reg    ap_predicate_op18_write_state2;
reg    ap_predicate_op20_write_state2;
reg    ap_block_state2;
reg   [30:0] i_0_reg_100;
wire   [31:0] zext_ln81_fu_111_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 strm_in_V_0_sel_rd = 1'b0;
#0 strm_in_V_0_sel_wr = 1'b0;
#0 strm_in_V_0_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0))) & (icmp_ln81_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((strm_in_V_0_ack_out == 1'b1) & (strm_in_V_0_vld_out == 1'b1))) begin
            strm_in_V_0_sel_rd <= ~strm_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((strm_in_V_0_ack_in == 1'b1) & (strm_in_V_0_vld_in == 1'b1))) begin
            strm_in_V_0_sel_wr <= ~strm_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        strm_in_V_0_state <= 2'd0;
    end else begin
        if ((((strm_in_V_0_state == 2'd2) & (strm_in_V_0_vld_in == 1'b0)) | ((strm_in_V_0_state == 2'd3) & (strm_in_V_0_vld_in == 1'b0) & (strm_in_V_0_ack_out == 1'b1)))) begin
            strm_in_V_0_state <= 2'd2;
        end else if ((((strm_in_V_0_state == 2'd1) & (strm_in_V_0_ack_out == 1'b0)) | ((strm_in_V_0_state == 2'd3) & (strm_in_V_0_ack_out == 1'b0) & (strm_in_V_0_vld_in == 1'b1)))) begin
            strm_in_V_0_state <= 2'd1;
        end else if (((~((strm_in_V_0_vld_in == 1'b0) & (strm_in_V_0_ack_out == 1'b1)) & ~((strm_in_V_0_ack_out == 1'b0) & (strm_in_V_0_vld_in == 1'b1)) & (strm_in_V_0_state == 2'd3)) | ((strm_in_V_0_state == 2'd1) & (strm_in_V_0_ack_out == 1'b1)) | ((strm_in_V_0_state == 2'd2) & (strm_in_V_0_vld_in == 1'b1)))) begin
            strm_in_V_0_state <= 2'd3;
        end else begin
            strm_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_100 <= 31'd0;
    end else if ((~(((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0))) & (icmp_ln81_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_100 <= i_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((strm_in_V_0_load_A == 1'b1)) begin
        strm_in_V_0_payload_A <= strm_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((strm_in_V_0_load_B == 1'b1)) begin
        strm_in_V_0_payload_B <= strm_in_V_TDATA;
    end
end

always @ (*) begin
    if ((~(((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0))) & (icmp_ln81_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0))) & (icmp_ln81_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln81_fu_115_p2 == 1'd1) & (icmp_ln84_fu_126_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        photo_in_V_blk_n = photo_in_V_full_n;
    end else begin
        photo_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op18_write_state2 == 1'b1))) begin
        photo_in_V_write = 1'b1;
    end else begin
        photo_in_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0))) & (icmp_ln81_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_0_ack_out = 1'b1;
    end else begin
        strm_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((strm_in_V_0_sel == 1'b1)) begin
        strm_in_V_0_data_out = strm_in_V_0_payload_B;
    end else begin
        strm_in_V_0_data_out = strm_in_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln81_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_V_TDATA_blk_n = strm_in_V_0_state[1'd0];
    end else begin
        strm_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln84_fu_126_p2 == 1'd1) & (icmp_ln81_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        weights_blk_n = weights_full_n;
    end else begin
        weights_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2) & (ap_predicate_op20_write_state2 == 1'b1))) begin
        weights_write = 1'b1;
    end else begin
        weights_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0))) & (icmp_ln81_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0))) & (icmp_ln81_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((weights_full_n == 1'b0) & (ap_predicate_op20_write_state2 == 1'b1)) | ((photo_in_V_full_n == 1'b0) & (ap_predicate_op18_write_state2 == 1'b1)) | ((icmp_ln81_fu_115_p2 == 1'd1) & (strm_in_V_0_vld_out == 1'b0)));
end

always @ (*) begin
    ap_predicate_op18_write_state2 = ((icmp_ln81_fu_115_p2 == 1'd1) & (icmp_ln84_fu_126_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op20_write_state2 = ((icmp_ln84_fu_126_p2 == 1'd1) & (icmp_ln81_fu_115_p2 == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign i_fu_120_p2 = (i_0_reg_100 + 31'd1);

assign icmp_ln81_fu_115_p2 = (($signed(zext_ln81_fu_111_p1) < $signed(input_size_axi)) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_126_p2 = (($signed(zext_ln81_fu_111_p1) < $signed(weight_num_axi)) ? 1'b1 : 1'b0);

assign photo_in_V_din = strm_in_V_0_data_out;

assign start_out = real_start;

assign strm_in_V_0_ack_in = strm_in_V_0_state[1'd1];

assign strm_in_V_0_load_A = (strm_in_V_0_state_cmp_full & ~strm_in_V_0_sel_wr);

assign strm_in_V_0_load_B = (strm_in_V_0_state_cmp_full & strm_in_V_0_sel_wr);

assign strm_in_V_0_sel = strm_in_V_0_sel_rd;

assign strm_in_V_0_state_cmp_full = ((strm_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign strm_in_V_0_vld_in = strm_in_V_TVALID;

assign strm_in_V_0_vld_out = strm_in_V_0_state[1'd0];

assign strm_in_V_TREADY = strm_in_V_0_state[1'd1];

assign weights_din = strm_in_V_0_data_out;

assign zext_ln81_fu_111_p1 = i_0_reg_100;

endmodule //Loop_load_weight_pro
