// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_2_proc5 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_width_axi,
        weights_dout,
        weights_empty_n,
        weights_read,
        in_channel_axi,
        photo_in_V_dout,
        photo_in_V_empty_n,
        photo_in_V_read,
        con_out_V_din,
        con_out_V_full_n,
        con_out_V_write
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state30 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] in_width_axi;
input  [31:0] weights_dout;
input   weights_empty_n;
output   weights_read;
input  [31:0] in_channel_axi;
input  [31:0] photo_in_V_dout;
input   photo_in_V_empty_n;
output   photo_in_V_read;
output  [31:0] con_out_V_din;
input   con_out_V_full_n;
output   con_out_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg weights_read;
reg photo_in_V_read;
reg con_out_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    weights_blk_n;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln101_fu_664_p2;
reg    photo_in_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] or_ln113_reg_1183;
reg    con_out_V_blk_n;
reg    ap_enable_reg_pp0_iter20;
reg   [0:0] and_ln132_reg_1209;
reg   [0:0] and_ln132_reg_1209_pp0_iter19_reg;
reg   [0:0] icmp_ln171_reg_1223;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter19_reg;
reg   [30:0] row60_reg_347;
reg   [0:0] icmp_ln10859_reg_358;
reg   [31:0] col_assign_158_reg_367;
reg   [30:0] row_045_reg_378;
reg   [63:0] indvar_flatten44_reg_389;
reg   [31:0] con_win_val_0_1_256_reg_400;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_state14_pp0_stage0_iter5;
wire    ap_block_state15_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state18_pp0_stage0_iter9;
wire    ap_block_state19_pp0_stage0_iter10;
wire    ap_block_state20_pp0_stage0_iter11;
wire    ap_block_state21_pp0_stage0_iter12;
wire    ap_block_state22_pp0_stage0_iter13;
wire    ap_block_state23_pp0_stage0_iter14;
wire    ap_block_state24_pp0_stage0_iter15;
wire    ap_block_state25_pp0_stage0_iter16;
wire    ap_block_state26_pp0_stage0_iter17;
wire    ap_block_state27_pp0_stage0_iter18;
wire    ap_block_state28_pp0_stage0_iter19;
reg    ap_predicate_op275_write_state29;
reg    ap_block_state29_pp0_stage0_iter20;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] con_win_val_0_154_reg_410;
reg   [31:0] con_win_val_1_1_252_reg_421;
reg   [31:0] con_win_val_1_150_reg_431;
reg   [31:0] con_win_val_2_1_248_reg_442;
reg   [31:0] con_win_val_2_146_reg_452;
reg   [31:0] con_win_val_2_2_reg_463;
reg    ap_block_state1;
wire   [31:0] add_ln90_fu_557_p2;
reg   [31:0] add_ln90_reg_978;
wire    ap_CS_fsm_state2;
wire   [30:0] i_fu_571_p2;
reg   [30:0] i_reg_986;
wire   [31:0] add_ln98_fu_577_p2;
wire   [0:0] icmp_ln90_fu_566_p2;
wire   [31:0] j_fu_587_p2;
wire    ap_CS_fsm_state3;
reg   [31:0] tmpp_3_reg_1006;
wire   [63:0] mul_ln96_fu_607_p2;
wire   [0:0] icmp_ln98_1_fu_613_p2;
reg   [31:0] con_win_val_2_1_lo_reg_1111;
wire    ap_CS_fsm_state5;
reg   [31:0] con_win_val_2_1_1_s_reg_1116;
reg   [31:0] con_win_val_1_1_lo_reg_1121;
reg   [31:0] con_win_val_1_1_1_s_reg_1126;
reg   [31:0] con_win_val_0_1_lo_reg_1131;
reg   [31:0] con_win_val_0_1_1_s_reg_1136;
wire   [30:0] ch_fu_636_p2;
reg   [30:0] ch_reg_1141;
wire   [0:0] icmp_ln100_fu_642_p2;
wire    ap_CS_fsm_state6;
wire   [1:0] i_1_fu_648_p2;
reg   [1:0] i_1_reg_1151;
wire   [0:0] icmp_ln108_1_fu_654_p2;
wire   [0:0] icmp_ln107_1_fu_659_p2;
wire   [1:0] j_1_fu_670_p2;
reg   [1:0] j_1_reg_1168;
reg    ap_block_state7;
wire   [31:0] select_ln107_fu_721_p3;
reg   [31:0] select_ln107_reg_1173;
reg   [31:0] select_ln107_reg_1173_pp0_iter1_reg;
wire   [30:0] select_ln107_1_fu_729_p3;
reg   [30:0] select_ln107_1_reg_1178;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] or_ln113_fu_751_p2;
wire   [63:0] add_ln107_fu_757_p2;
reg   [63:0] add_ln107_reg_1187;
reg   [7:0] line_buf_val_1_addr_reg_1192;
reg   [7:0] line_buf_val_2_addr_reg_1198;
wire   [0:0] icmp_ln124_fu_779_p2;
reg   [0:0] icmp_ln124_reg_1204;
wire   [0:0] and_ln132_fu_797_p2;
reg   [0:0] and_ln132_reg_1209_pp0_iter1_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter2_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter3_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter4_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter5_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter6_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter7_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter8_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter9_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter10_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter11_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter12_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter13_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter14_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter15_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter16_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter17_reg;
reg   [0:0] and_ln132_reg_1209_pp0_iter18_reg;
wire   [0:0] icmp_ln146_fu_803_p2;
reg   [0:0] icmp_ln146_reg_1213;
reg   [0:0] icmp_ln146_reg_1213_pp0_iter1_reg;
reg   [0:0] icmp_ln146_reg_1213_pp0_iter2_reg;
wire   [30:0] add_ln149_fu_809_p2;
reg   [30:0] add_ln149_reg_1218;
wire   [0:0] icmp_ln171_fu_824_p2;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter1_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter2_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter3_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter4_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter5_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter6_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter7_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter8_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter9_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter10_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter11_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter12_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter13_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter14_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter15_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter16_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter17_reg;
reg   [0:0] icmp_ln171_reg_1223_pp0_iter18_reg;
wire   [31:0] col_fu_830_p2;
reg   [31:0] col_reg_1227;
wire   [0:0] icmp_ln108_fu_836_p2;
reg   [0:0] icmp_ln108_reg_1232;
wire   [30:0] row_fu_841_p2;
reg   [30:0] row_reg_1237;
wire   [0:0] icmp_ln107_fu_847_p2;
reg   [0:0] icmp_ln107_reg_1242;
reg   [0:0] icmp_ln107_reg_1242_pp0_iter1_reg;
wire   [31:0] line_buf_val_2_q0;
reg   [31:0] con_win_val_1_1_3_reg_1246;
reg   [31:0] con_win_val_1_1_3_reg_1246_pp0_iter2_reg;
reg   [31:0] con_win_val_1_1_3_reg_1246_pp0_iter3_reg;
reg   [31:0] con_win_val_1_1_3_reg_1246_pp0_iter4_reg;
wire   [31:0] con_win_val_0_1_3_fu_852_p3;
reg   [31:0] con_win_val_0_1_3_reg_1253;
reg   [31:0] con_win_val_0_1_3_reg_1253_pp0_iter2_reg;
reg   [31:0] con_win_val_0_1_3_reg_1253_pp0_iter3_reg;
reg   [31:0] con_win_val_0_1_3_reg_1253_pp0_iter4_reg;
wire   [31:0] mul_ln149_fu_886_p2;
reg   [31:0] mul_ln149_reg_1290;
reg   [15:0] output_buf_addr_1_reg_1300;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter3_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter4_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter5_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter6_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter7_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter8_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter9_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter10_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter11_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter12_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter13_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter14_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter15_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter16_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter17_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter18_reg;
reg   [15:0] output_buf_addr_1_reg_1300_pp0_iter19_reg;
wire   [31:0] tmpp_2_fu_910_p3;
reg   [31:0] tmpp_2_reg_1306;
wire   [31:0] grp_fu_514_p2;
reg   [31:0] tmp0_reg_1311;
wire   [31:0] grp_fu_519_p2;
reg   [31:0] tmp1_reg_1316;
wire   [31:0] grp_fu_524_p2;
reg   [31:0] tmp3_reg_1321;
reg   [31:0] tmp3_reg_1321_pp0_iter4_reg;
wire   [31:0] grp_fu_529_p2;
reg   [31:0] tmp4_reg_1326;
wire   [31:0] grp_fu_534_p2;
reg   [31:0] tmp6_reg_1331;
wire   [31:0] grp_fu_539_p2;
reg   [31:0] tmp7_reg_1336;
wire   [31:0] grp_fu_544_p2;
reg   [31:0] tmp8_reg_1341;
wire   [31:0] grp_fu_549_p2;
reg   [31:0] tmp2_reg_1356;
wire   [31:0] grp_fu_553_p2;
reg   [31:0] tmp5_reg_1361;
wire   [31:0] grp_fu_478_p2;
reg   [31:0] tmp9_reg_1366;
reg   [31:0] tmp9_reg_1366_pp0_iter8_reg;
reg   [31:0] tmp9_reg_1366_pp0_iter9_reg;
reg   [31:0] tmp9_reg_1366_pp0_iter10_reg;
reg   [31:0] tmp9_reg_1366_pp0_iter11_reg;
wire   [31:0] grp_fu_482_p2;
reg   [31:0] tmp10_reg_1371;
wire   [31:0] grp_fu_486_p2;
reg   [31:0] tmp14_reg_1376;
wire   [31:0] grp_fu_490_p2;
reg   [31:0] tmp13_reg_1381;
reg   [31:0] tmp13_reg_1381_pp0_iter9_reg;
reg   [31:0] tmp13_reg_1381_pp0_iter10_reg;
reg   [31:0] tmp13_reg_1381_pp0_iter11_reg;
wire   [31:0] grp_fu_494_p2;
reg   [31:0] tmp11_reg_1386;
wire   [31:0] grp_fu_498_p2;
reg   [31:0] tmp15_reg_1391;
wire   [31:0] grp_fu_502_p2;
reg   [31:0] tmp12_reg_1396;
wire   [31:0] grp_fu_506_p2;
reg   [31:0] tmp16_reg_1401;
wire   [31:0] grp_fu_510_p2;
reg   [31:0] acc8_reg_1406;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
wire   [15:0] output_buf_address0;
reg    output_buf_ce0;
wire   [31:0] output_buf_q0;
reg   [15:0] output_buf_address1;
reg    output_buf_ce1;
reg    output_buf_we1;
reg   [31:0] output_buf_d1;
wire   [7:0] line_buf_val_1_address0;
reg    line_buf_val_1_ce0;
wire   [31:0] line_buf_val_1_q0;
wire   [7:0] line_buf_val_1_address1;
reg    line_buf_val_1_ce1;
reg    line_buf_val_1_we1;
wire   [7:0] line_buf_val_2_address0;
reg    line_buf_val_2_ce0;
wire   [7:0] line_buf_val_2_address1;
reg    line_buf_val_2_ce1;
reg    line_buf_val_2_we1;
reg   [30:0] i1_0_reg_278;
wire   [0:0] icmp_ln91_fu_582_p2;
reg   [31:0] phi_mul_reg_289;
reg   [31:0] j_0_reg_301;
reg   [30:0] zext_ln9878_reg_312;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln98_fu_955_p2;
reg   [1:0] row_assign_reg_324;
wire   [1:0] ap_phi_mux_col_assign_phi_fu_340_p4;
reg   [1:0] col_assign_reg_336;
wire    ap_CS_fsm_state8;
reg   [30:0] ap_phi_mux_row60_phi_fu_351_p4;
reg   [0:0] ap_phi_mux_icmp_ln10859_phi_fu_361_p4;
reg   [31:0] ap_phi_mux_col_assign_158_phi_fu_371_p4;
reg   [30:0] ap_phi_mux_row_045_phi_fu_382_p4;
reg   [63:0] ap_phi_mux_indvar_flatten44_phi_fu_393_p4;
reg   [31:0] ap_phi_mux_con_win_val_0_1_256_phi_fu_403_p4;
reg   [31:0] ap_phi_mux_con_win_val_0_154_phi_fu_414_p4;
reg   [31:0] ap_phi_mux_con_win_val_1_1_252_phi_fu_424_p4;
reg   [31:0] ap_phi_mux_con_win_val_1_150_phi_fu_435_p4;
reg   [31:0] ap_phi_mux_con_win_val_2_1_248_phi_fu_445_p4;
reg   [31:0] ap_phi_mux_con_win_val_2_146_phi_fu_456_p4;
reg   [31:0] ap_phi_mux_con_win_val_2_2_phi_fu_468_p4;
reg   [31:0] ap_phi_reg_pp0_iter1_con_win_val_2_2_reg_463;
wire   [31:0] ap_phi_reg_pp0_iter0_con_win_val_2_2_reg_463;
wire  signed [63:0] sext_ln92_fu_599_p1;
wire   [63:0] zext_ln729_fu_763_p1;
wire  signed [63:0] sext_ln149_fu_905_p1;
reg   [31:0] con_win_val_2_1_fu_130;
reg   [31:0] con_win_val_2_1_1_fu_134;
reg   [31:0] con_win_val_1_1_fu_138;
reg   [31:0] con_win_val_1_1_1_fu_142;
reg   [31:0] con_win_val_0_1_fu_146;
reg   [31:0] con_win_val_0_1_1_fu_150;
reg   [31:0] weight_win_val_2_1_fu_154;
reg   [31:0] weight_win_val_2_1_1_fu_158;
reg   [31:0] weight_win_val_2_1_2_fu_162;
reg   [31:0] weight_win_val_2_1_3_fu_166;
reg   [31:0] weight_win_val_2_1_4_fu_170;
reg   [31:0] weight_win_val_2_1_5_fu_174;
reg   [31:0] weight_win_val_2_1_6_fu_178;
reg   [31:0] weight_win_val_2_1_7_fu_182;
reg   [31:0] weight_win_val_2_1_8_fu_186;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] add_ln90_fu_557_p1;
wire   [31:0] zext_ln90_fu_562_p1;
wire  signed [31:0] icmp_ln90_fu_566_p1;
wire  signed [31:0] add_ln98_fu_577_p0;
wire  signed [31:0] icmp_ln91_fu_582_p1;
wire   [31:0] add_ln92_fu_593_p2;
wire   [31:0] mul_ln96_fu_607_p0;
wire   [63:0] zext_ln96_fu_604_p1;
wire   [31:0] mul_ln96_fu_607_p1;
wire   [31:0] zext_ln107_fu_737_p1;
wire  signed [31:0] icmp_ln113_fu_741_p1;
wire  signed [31:0] icmp_ln113_1_fu_746_p1;
wire   [0:0] icmp_ln113_fu_741_p2;
wire   [0:0] icmp_ln113_1_fu_746_p2;
wire   [29:0] tmp_fu_769_p4;
wire   [0:0] icmp_ln132_fu_785_p2;
wire   [0:0] icmp_ln132_1_fu_791_p2;
wire   [30:0] trunc_ln171_fu_815_p1;
wire   [30:0] add_ln171_fu_818_p2;
wire   [30:0] mul_ln149_fu_886_p0;
wire  signed [31:0] mul_ln149_fu_886_p1;
wire   [31:0] add_ln149_1_fu_895_p2;
wire   [31:0] add_ln149_2_fu_900_p2;
wire   [31:0] zext_ln98_fu_952_p1;
reg    grp_fu_478_ce;
reg    grp_fu_482_ce;
reg    grp_fu_486_ce;
reg    grp_fu_490_ce;
reg    grp_fu_494_ce;
reg    grp_fu_498_ce;
reg    grp_fu_502_ce;
reg    grp_fu_506_ce;
reg    grp_fu_510_ce;
reg    grp_fu_514_ce;
reg    grp_fu_519_ce;
reg    grp_fu_524_ce;
reg    grp_fu_529_ce;
reg    grp_fu_534_ce;
reg    grp_fu_539_ce;
reg    grp_fu_544_ce;
reg    grp_fu_549_ce;
reg    grp_fu_553_ce;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp0;
wire    ap_enable_operation_153;
reg    ap_enable_state9_pp0_iter0_stage0;
wire    ap_enable_operation_188;
reg    ap_enable_state10_pp0_iter1_stage0;
wire    ap_enable_operation_190;
wire    ap_enable_operation_155;
wire    ap_enable_operation_189;
wire    ap_enable_operation_191;
reg    ap_predicate_op212_load_state11;
reg    ap_enable_operation_212;
reg    ap_enable_state11_pp0_iter2_stage0;
reg    ap_predicate_op220_load_state12;
reg    ap_enable_operation_220;
reg    ap_enable_state12_pp0_iter3_stage0;
reg    ap_enable_operation_274;
reg    ap_enable_state29_pp0_iter20_stage0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] mul_ln149_fu_886_p00;
reg    ap_condition_260;
reg    ap_condition_369;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

Loop_2_proc5_outpbkb #(
    .DataWidth( 32 ),
    .AddressRange( 43264 ),
    .AddressWidth( 16 ))
output_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_buf_address0),
    .ce0(output_buf_ce0),
    .q0(output_buf_q0),
    .address1(output_buf_address1),
    .ce1(output_buf_ce1),
    .we1(output_buf_we1),
    .d1(output_buf_d1)
);

Loop_2_proc5_linecud #(
    .DataWidth( 32 ),
    .AddressRange( 210 ),
    .AddressWidth( 8 ))
line_buf_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buf_val_1_address0),
    .ce0(line_buf_val_1_ce0),
    .q0(line_buf_val_1_q0),
    .address1(line_buf_val_1_address1),
    .ce1(line_buf_val_1_ce1),
    .we1(line_buf_val_1_we1),
    .d1(line_buf_val_2_q0)
);

Loop_2_proc5_linecud #(
    .DataWidth( 32 ),
    .AddressRange( 210 ),
    .AddressWidth( 8 ))
line_buf_val_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(line_buf_val_2_address0),
    .ce0(line_buf_val_2_ce0),
    .q0(line_buf_val_2_q0),
    .address1(line_buf_val_2_address1),
    .ce1(line_buf_val_2_ce1),
    .we1(line_buf_val_2_we1),
    .d1(ap_phi_mux_con_win_val_2_2_phi_fu_468_p4)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp7_reg_1336),
    .din1(tmp6_reg_1331),
    .ce(grp_fu_478_ce),
    .dout(grp_fu_478_p2)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp4_reg_1326),
    .din1(tmpp_2_reg_1306),
    .ce(grp_fu_482_ce),
    .dout(grp_fu_482_p2)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp0_reg_1311),
    .din1(tmp1_reg_1316),
    .ce(grp_fu_486_ce),
    .dout(grp_fu_486_p2)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp3_reg_1321_pp0_iter4_reg),
    .din1(tmp8_reg_1341),
    .ce(grp_fu_490_ce),
    .dout(grp_fu_490_p2)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp10_reg_1371),
    .din1(tmp5_reg_1361),
    .ce(grp_fu_494_ce),
    .dout(grp_fu_494_p2)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp14_reg_1376),
    .din1(tmp2_reg_1356),
    .ce(grp_fu_498_ce),
    .dout(grp_fu_498_p2)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp11_reg_1386),
    .din1(tmp9_reg_1366_pp0_iter11_reg),
    .ce(grp_fu_502_ce),
    .dout(grp_fu_502_p2)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp15_reg_1391),
    .din1(tmp13_reg_1381_pp0_iter11_reg),
    .ce(grp_fu_506_ce),
    .dout(grp_fu_506_p2)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp16_reg_1401),
    .din1(tmp12_reg_1396),
    .ce(grp_fu_510_ce),
    .dout(grp_fu_510_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_win_val_2_1_8_fu_186),
    .din1(ap_phi_mux_con_win_val_0_1_256_phi_fu_403_p4),
    .ce(grp_fu_514_ce),
    .dout(grp_fu_514_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_win_val_2_1_7_fu_182),
    .din1(ap_phi_mux_con_win_val_0_154_phi_fu_414_p4),
    .ce(grp_fu_519_ce),
    .dout(grp_fu_519_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_win_val_2_1_5_fu_174),
    .din1(ap_phi_mux_con_win_val_1_1_252_phi_fu_424_p4),
    .ce(grp_fu_524_ce),
    .dout(grp_fu_524_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_win_val_2_1_4_fu_170),
    .din1(ap_phi_mux_con_win_val_1_150_phi_fu_435_p4),
    .ce(grp_fu_529_ce),
    .dout(grp_fu_529_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_win_val_2_1_2_fu_162),
    .din1(ap_phi_mux_con_win_val_2_1_248_phi_fu_445_p4),
    .ce(grp_fu_534_ce),
    .dout(grp_fu_534_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_win_val_2_1_1_fu_158),
    .din1(ap_phi_mux_con_win_val_2_146_phi_fu_456_p4),
    .ce(grp_fu_539_ce),
    .dout(grp_fu_539_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_win_val_2_1_fu_154),
    .din1(con_win_val_2_2_reg_463),
    .ce(grp_fu_544_ce),
    .dout(grp_fu_544_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weight_win_val_2_1_6_fu_178),
    .din1(con_win_val_0_1_3_reg_1253_pp0_iter4_reg),
    .ce(grp_fu_549_ce),
    .dout(grp_fu_549_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(con_win_val_1_1_3_reg_1246_pp0_iter4_reg),
    .din1(weight_win_val_2_1_3_fu_166),
    .ce(grp_fu_553_ce),
    .dout(grp_fu_553_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state30) & ((icmp_ln98_fu_955_p2 == 1'd0) | (icmp_ln98_1_fu_613_p2 == 1'd0)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln107_fu_847_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end else if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter20 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_260)) begin
        if ((or_ln113_fu_751_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_con_win_val_2_2_reg_463 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_con_win_val_2_2_reg_463 <= ap_phi_reg_pp0_iter0_con_win_val_2_2_reg_463;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        col_assign_158_reg_367 <= 32'd0;
    end else if (((icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_158_reg_367 <= col_reg_1227;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        col_assign_reg_336 <= j_1_reg_1168;
    end else if (((icmp_ln100_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        col_assign_reg_336 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        con_win_val_0_154_reg_410 <= con_win_val_0_1_lo_reg_1131;
    end else if (((icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        con_win_val_0_154_reg_410 <= con_win_val_0_1_3_reg_1253;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        con_win_val_0_1_256_reg_400 <= con_win_val_0_1_1_s_reg_1136;
    end else if (((icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        con_win_val_0_1_256_reg_400 <= con_win_val_0_154_reg_410;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        con_win_val_1_150_reg_431 <= con_win_val_1_1_lo_reg_1121;
    end else if (((icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        con_win_val_1_150_reg_431 <= con_win_val_1_1_3_reg_1246;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        con_win_val_1_1_252_reg_421 <= con_win_val_1_1_1_s_reg_1126;
    end else if (((icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        con_win_val_1_1_252_reg_421 <= con_win_val_1_150_reg_431;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        con_win_val_2_146_reg_452 <= con_win_val_2_1_lo_reg_1111;
    end else if (((icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        con_win_val_2_146_reg_452 <= con_win_val_2_2_reg_463;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        con_win_val_2_1_248_reg_442 <= con_win_val_2_1_1_s_reg_1116;
    end else if (((icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        con_win_val_2_1_248_reg_442 <= con_win_val_2_146_reg_452;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_369)) begin
        if ((or_ln113_reg_1183 == 1'd0)) begin
            con_win_val_2_2_reg_463 <= photo_in_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            con_win_val_2_2_reg_463 <= ap_phi_reg_pp0_iter1_con_win_val_2_2_reg_463;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_582_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_0_reg_278 <= i_reg_986;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_0_reg_278 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln10859_reg_358 <= icmp_ln108_1_fu_654_p2;
    end else if (((icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln10859_reg_358 <= icmp_ln108_reg_1232;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        indvar_flatten44_reg_389 <= 64'd0;
    end else if (((icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten44_reg_389 <= add_ln107_reg_1187;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_566_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_301 <= 32'd0;
    end else if (((icmp_ln91_fu_582_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_301 <= j_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_fu_582_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_289 <= add_ln90_reg_978;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_289 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        row60_reg_347 <= 31'd1;
    end else if (((icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row60_reg_347 <= row_reg_1237;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        row_045_reg_378 <= 31'd0;
    end else if (((icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_045_reg_378 <= select_ln107_1_reg_1178;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_assign_reg_324 <= 2'd0;
    end else if ((~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        row_assign_reg_324 <= i_1_reg_1151;
    end
end

always @ (posedge ap_clk) begin
    if ((icmp_ln98_1_fu_613_p2 == 1'd1)) begin
        if (((weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            zext_ln9878_reg_312 <= 31'd0;
        end else if (((icmp_ln98_fu_955_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
            zext_ln9878_reg_312 <= ch_reg_1141;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_reg_1209_pp0_iter18_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        acc8_reg_1406 <= grp_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln107_reg_1187 <= add_ln107_fu_757_p2;
        col_reg_1227 <= col_fu_830_p2;
        icmp_ln108_reg_1232 <= icmp_ln108_fu_836_p2;
        row_reg_1237 <= row_fu_841_p2;
        select_ln107_1_reg_1178 <= select_ln107_1_fu_729_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_fu_797_p2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln149_reg_1218 <= add_ln149_fu_809_p2;
        icmp_ln146_reg_1213 <= icmp_ln146_fu_803_p2;
        icmp_ln171_reg_1223 <= icmp_ln171_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln90_reg_978 <= add_ln90_fu_557_p2;
        i_reg_986 <= i_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln132_reg_1209 <= and_ln132_fu_797_p2;
        and_ln132_reg_1209_pp0_iter1_reg <= and_ln132_reg_1209;
        icmp_ln107_reg_1242 <= icmp_ln107_fu_847_p2;
        icmp_ln107_reg_1242_pp0_iter1_reg <= icmp_ln107_reg_1242;
        icmp_ln124_reg_1204 <= icmp_ln124_fu_779_p2;
        icmp_ln146_reg_1213_pp0_iter1_reg <= icmp_ln146_reg_1213;
        icmp_ln171_reg_1223_pp0_iter1_reg <= icmp_ln171_reg_1223;
        line_buf_val_1_addr_reg_1192 <= zext_ln729_fu_763_p1;
        line_buf_val_2_addr_reg_1198 <= zext_ln729_fu_763_p1;
        or_ln113_reg_1183 <= or_ln113_fu_751_p2;
        select_ln107_reg_1173 <= select_ln107_fu_721_p3;
        select_ln107_reg_1173_pp0_iter1_reg <= select_ln107_reg_1173;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln132_reg_1209_pp0_iter10_reg <= and_ln132_reg_1209_pp0_iter9_reg;
        and_ln132_reg_1209_pp0_iter11_reg <= and_ln132_reg_1209_pp0_iter10_reg;
        and_ln132_reg_1209_pp0_iter12_reg <= and_ln132_reg_1209_pp0_iter11_reg;
        and_ln132_reg_1209_pp0_iter13_reg <= and_ln132_reg_1209_pp0_iter12_reg;
        and_ln132_reg_1209_pp0_iter14_reg <= and_ln132_reg_1209_pp0_iter13_reg;
        and_ln132_reg_1209_pp0_iter15_reg <= and_ln132_reg_1209_pp0_iter14_reg;
        and_ln132_reg_1209_pp0_iter16_reg <= and_ln132_reg_1209_pp0_iter15_reg;
        and_ln132_reg_1209_pp0_iter17_reg <= and_ln132_reg_1209_pp0_iter16_reg;
        and_ln132_reg_1209_pp0_iter18_reg <= and_ln132_reg_1209_pp0_iter17_reg;
        and_ln132_reg_1209_pp0_iter19_reg <= and_ln132_reg_1209_pp0_iter18_reg;
        and_ln132_reg_1209_pp0_iter2_reg <= and_ln132_reg_1209_pp0_iter1_reg;
        and_ln132_reg_1209_pp0_iter3_reg <= and_ln132_reg_1209_pp0_iter2_reg;
        and_ln132_reg_1209_pp0_iter4_reg <= and_ln132_reg_1209_pp0_iter3_reg;
        and_ln132_reg_1209_pp0_iter5_reg <= and_ln132_reg_1209_pp0_iter4_reg;
        and_ln132_reg_1209_pp0_iter6_reg <= and_ln132_reg_1209_pp0_iter5_reg;
        and_ln132_reg_1209_pp0_iter7_reg <= and_ln132_reg_1209_pp0_iter6_reg;
        and_ln132_reg_1209_pp0_iter8_reg <= and_ln132_reg_1209_pp0_iter7_reg;
        and_ln132_reg_1209_pp0_iter9_reg <= and_ln132_reg_1209_pp0_iter8_reg;
        con_win_val_0_1_3_reg_1253_pp0_iter2_reg <= con_win_val_0_1_3_reg_1253;
        con_win_val_0_1_3_reg_1253_pp0_iter3_reg <= con_win_val_0_1_3_reg_1253_pp0_iter2_reg;
        con_win_val_0_1_3_reg_1253_pp0_iter4_reg <= con_win_val_0_1_3_reg_1253_pp0_iter3_reg;
        con_win_val_1_1_3_reg_1246_pp0_iter2_reg <= con_win_val_1_1_3_reg_1246;
        con_win_val_1_1_3_reg_1246_pp0_iter3_reg <= con_win_val_1_1_3_reg_1246_pp0_iter2_reg;
        con_win_val_1_1_3_reg_1246_pp0_iter4_reg <= con_win_val_1_1_3_reg_1246_pp0_iter3_reg;
        icmp_ln146_reg_1213_pp0_iter2_reg <= icmp_ln146_reg_1213_pp0_iter1_reg;
        icmp_ln171_reg_1223_pp0_iter10_reg <= icmp_ln171_reg_1223_pp0_iter9_reg;
        icmp_ln171_reg_1223_pp0_iter11_reg <= icmp_ln171_reg_1223_pp0_iter10_reg;
        icmp_ln171_reg_1223_pp0_iter12_reg <= icmp_ln171_reg_1223_pp0_iter11_reg;
        icmp_ln171_reg_1223_pp0_iter13_reg <= icmp_ln171_reg_1223_pp0_iter12_reg;
        icmp_ln171_reg_1223_pp0_iter14_reg <= icmp_ln171_reg_1223_pp0_iter13_reg;
        icmp_ln171_reg_1223_pp0_iter15_reg <= icmp_ln171_reg_1223_pp0_iter14_reg;
        icmp_ln171_reg_1223_pp0_iter16_reg <= icmp_ln171_reg_1223_pp0_iter15_reg;
        icmp_ln171_reg_1223_pp0_iter17_reg <= icmp_ln171_reg_1223_pp0_iter16_reg;
        icmp_ln171_reg_1223_pp0_iter18_reg <= icmp_ln171_reg_1223_pp0_iter17_reg;
        icmp_ln171_reg_1223_pp0_iter19_reg <= icmp_ln171_reg_1223_pp0_iter18_reg;
        icmp_ln171_reg_1223_pp0_iter2_reg <= icmp_ln171_reg_1223_pp0_iter1_reg;
        icmp_ln171_reg_1223_pp0_iter3_reg <= icmp_ln171_reg_1223_pp0_iter2_reg;
        icmp_ln171_reg_1223_pp0_iter4_reg <= icmp_ln171_reg_1223_pp0_iter3_reg;
        icmp_ln171_reg_1223_pp0_iter5_reg <= icmp_ln171_reg_1223_pp0_iter4_reg;
        icmp_ln171_reg_1223_pp0_iter6_reg <= icmp_ln171_reg_1223_pp0_iter5_reg;
        icmp_ln171_reg_1223_pp0_iter7_reg <= icmp_ln171_reg_1223_pp0_iter6_reg;
        icmp_ln171_reg_1223_pp0_iter8_reg <= icmp_ln171_reg_1223_pp0_iter7_reg;
        icmp_ln171_reg_1223_pp0_iter9_reg <= icmp_ln171_reg_1223_pp0_iter8_reg;
        output_buf_addr_1_reg_1300_pp0_iter10_reg <= output_buf_addr_1_reg_1300_pp0_iter9_reg;
        output_buf_addr_1_reg_1300_pp0_iter11_reg <= output_buf_addr_1_reg_1300_pp0_iter10_reg;
        output_buf_addr_1_reg_1300_pp0_iter12_reg <= output_buf_addr_1_reg_1300_pp0_iter11_reg;
        output_buf_addr_1_reg_1300_pp0_iter13_reg <= output_buf_addr_1_reg_1300_pp0_iter12_reg;
        output_buf_addr_1_reg_1300_pp0_iter14_reg <= output_buf_addr_1_reg_1300_pp0_iter13_reg;
        output_buf_addr_1_reg_1300_pp0_iter15_reg <= output_buf_addr_1_reg_1300_pp0_iter14_reg;
        output_buf_addr_1_reg_1300_pp0_iter16_reg <= output_buf_addr_1_reg_1300_pp0_iter15_reg;
        output_buf_addr_1_reg_1300_pp0_iter17_reg <= output_buf_addr_1_reg_1300_pp0_iter16_reg;
        output_buf_addr_1_reg_1300_pp0_iter18_reg <= output_buf_addr_1_reg_1300_pp0_iter17_reg;
        output_buf_addr_1_reg_1300_pp0_iter19_reg <= output_buf_addr_1_reg_1300_pp0_iter18_reg;
        output_buf_addr_1_reg_1300_pp0_iter3_reg <= output_buf_addr_1_reg_1300;
        output_buf_addr_1_reg_1300_pp0_iter4_reg <= output_buf_addr_1_reg_1300_pp0_iter3_reg;
        output_buf_addr_1_reg_1300_pp0_iter5_reg <= output_buf_addr_1_reg_1300_pp0_iter4_reg;
        output_buf_addr_1_reg_1300_pp0_iter6_reg <= output_buf_addr_1_reg_1300_pp0_iter5_reg;
        output_buf_addr_1_reg_1300_pp0_iter7_reg <= output_buf_addr_1_reg_1300_pp0_iter6_reg;
        output_buf_addr_1_reg_1300_pp0_iter8_reg <= output_buf_addr_1_reg_1300_pp0_iter7_reg;
        output_buf_addr_1_reg_1300_pp0_iter9_reg <= output_buf_addr_1_reg_1300_pp0_iter8_reg;
        tmp13_reg_1381_pp0_iter10_reg <= tmp13_reg_1381_pp0_iter9_reg;
        tmp13_reg_1381_pp0_iter11_reg <= tmp13_reg_1381_pp0_iter10_reg;
        tmp13_reg_1381_pp0_iter9_reg <= tmp13_reg_1381;
        tmp3_reg_1321_pp0_iter4_reg <= tmp3_reg_1321;
        tmp9_reg_1366_pp0_iter10_reg <= tmp9_reg_1366_pp0_iter9_reg;
        tmp9_reg_1366_pp0_iter11_reg <= tmp9_reg_1366_pp0_iter10_reg;
        tmp9_reg_1366_pp0_iter8_reg <= tmp9_reg_1366;
        tmp9_reg_1366_pp0_iter9_reg <= tmp9_reg_1366_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ch_reg_1141 <= ch_fu_636_p2;
        con_win_val_0_1_1_s_reg_1136 <= con_win_val_0_1_1_fu_150;
        con_win_val_0_1_lo_reg_1131 <= con_win_val_0_1_fu_146;
        con_win_val_1_1_1_s_reg_1126 <= con_win_val_1_1_1_fu_142;
        con_win_val_1_1_lo_reg_1121 <= con_win_val_1_1_fu_138;
        con_win_val_2_1_1_s_reg_1116 <= con_win_val_2_1_1_fu_134;
        con_win_val_2_1_lo_reg_1111 <= con_win_val_2_1_fu_130;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln98_1_fu_613_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        con_win_val_0_1_1_fu_150 <= con_win_val_0_154_reg_410;
        con_win_val_0_1_fu_146 <= con_win_val_0_1_3_reg_1253;
        con_win_val_1_1_1_fu_142 <= con_win_val_1_150_reg_431;
        con_win_val_1_1_fu_138 <= con_win_val_1_1_3_reg_1246;
        con_win_val_2_1_1_fu_134 <= con_win_val_2_146_reg_452;
        con_win_val_2_1_fu_130 <= con_win_val_2_2_reg_463;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        con_win_val_0_1_3_reg_1253 <= con_win_val_0_1_3_fu_852_p3;
        con_win_val_1_1_3_reg_1246 <= line_buf_val_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_1151 <= i_1_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state7))) begin
        j_1_reg_1168 <= j_1_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_reg_1209) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln149_reg_1290 <= mul_ln149_fu_886_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_reg_1209_pp0_iter1_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buf_addr_1_reg_1300 <= sext_ln149_fu_905_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_reg_1209_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp0_reg_1311 <= grp_fu_514_p2;
        tmp1_reg_1316 <= grp_fu_519_p2;
        tmp3_reg_1321 <= grp_fu_524_p2;
        tmp4_reg_1326 <= grp_fu_529_p2;
        tmp6_reg_1331 <= grp_fu_534_p2;
        tmp7_reg_1336 <= grp_fu_539_p2;
        tmpp_2_reg_1306 <= tmpp_2_fu_910_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_reg_1209_pp0_iter6_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp10_reg_1371 <= grp_fu_482_p2;
        tmp14_reg_1376 <= grp_fu_486_p2;
        tmp2_reg_1356 <= grp_fu_549_p2;
        tmp5_reg_1361 <= grp_fu_553_p2;
        tmp9_reg_1366 <= grp_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_reg_1209_pp0_iter10_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp11_reg_1386 <= grp_fu_494_p2;
        tmp15_reg_1391 <= grp_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_reg_1209_pp0_iter14_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp12_reg_1396 <= grp_fu_502_p2;
        tmp16_reg_1401 <= grp_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_reg_1209_pp0_iter7_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp13_reg_1381 <= grp_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln132_reg_1209_pp0_iter3_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp8_reg_1341 <= grp_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmpp_3_reg_1006 <= weights_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(row_assign_reg_324 == 2'd1) & ~(row_assign_reg_324 == 2'd0) & ~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_win_val_2_1_1_fu_158 <= weights_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(row_assign_reg_324 == 2'd1) & ~(row_assign_reg_324 == 2'd0) & ~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_win_val_2_1_2_fu_162 <= weights_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd1) & ~(ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd0) & ~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (row_assign_reg_324 == 2'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_win_val_2_1_3_fu_166 <= weights_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd1) & (row_assign_reg_324 == 2'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_win_val_2_1_4_fu_170 <= weights_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd0) & (row_assign_reg_324 == 2'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_win_val_2_1_5_fu_174 <= weights_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd1) & ~(ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd0) & ~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (row_assign_reg_324 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_win_val_2_1_6_fu_178 <= weights_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd1) & (row_assign_reg_324 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_win_val_2_1_7_fu_182 <= weights_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd0) & (row_assign_reg_324 == 2'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_win_val_2_1_8_fu_186 <= weights_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd1) & ~(ap_phi_mux_col_assign_phi_fu_340_p4 == 2'd0) & ~(row_assign_reg_324 == 2'd1) & ~(row_assign_reg_324 == 2'd0) & ~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        weight_win_val_2_1_fu_154 <= weights_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & ((icmp_ln98_fu_955_p2 == 1'd0) | (icmp_ln98_1_fu_613_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_col_assign_158_phi_fu_371_p4 = col_reg_1227;
    end else begin
        ap_phi_mux_col_assign_158_phi_fu_371_p4 = col_assign_158_reg_367;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_con_win_val_0_154_phi_fu_414_p4 = con_win_val_0_1_3_reg_1253;
    end else begin
        ap_phi_mux_con_win_val_0_154_phi_fu_414_p4 = con_win_val_0_154_reg_410;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_con_win_val_0_1_256_phi_fu_403_p4 = con_win_val_0_154_reg_410;
    end else begin
        ap_phi_mux_con_win_val_0_1_256_phi_fu_403_p4 = con_win_val_0_1_256_reg_400;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_con_win_val_1_150_phi_fu_435_p4 = con_win_val_1_1_3_reg_1246;
    end else begin
        ap_phi_mux_con_win_val_1_150_phi_fu_435_p4 = con_win_val_1_150_reg_431;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_con_win_val_1_1_252_phi_fu_424_p4 = con_win_val_1_150_reg_431;
    end else begin
        ap_phi_mux_con_win_val_1_1_252_phi_fu_424_p4 = con_win_val_1_1_252_reg_421;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_con_win_val_2_146_phi_fu_456_p4 = con_win_val_2_2_reg_463;
    end else begin
        ap_phi_mux_con_win_val_2_146_phi_fu_456_p4 = con_win_val_2_146_reg_452;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_con_win_val_2_1_248_phi_fu_445_p4 = con_win_val_2_146_reg_452;
    end else begin
        ap_phi_mux_con_win_val_2_1_248_phi_fu_445_p4 = con_win_val_2_1_248_reg_442;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln113_reg_1183 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_con_win_val_2_2_phi_fu_468_p4 = photo_in_V_dout;
    end else begin
        ap_phi_mux_con_win_val_2_2_phi_fu_468_p4 = ap_phi_reg_pp0_iter1_con_win_val_2_2_reg_463;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_icmp_ln10859_phi_fu_361_p4 = icmp_ln108_reg_1232;
    end else begin
        ap_phi_mux_icmp_ln10859_phi_fu_361_p4 = icmp_ln10859_reg_358;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten44_phi_fu_393_p4 = add_ln107_reg_1187;
    end else begin
        ap_phi_mux_indvar_flatten44_phi_fu_393_p4 = indvar_flatten44_reg_389;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_row60_phi_fu_351_p4 = row_reg_1237;
    end else begin
        ap_phi_mux_row60_phi_fu_351_p4 = row60_reg_347;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln107_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_row_045_phi_fu_382_p4 = select_ln107_1_reg_1178;
    end else begin
        ap_phi_mux_row_045_phi_fu_382_p4 = row_045_reg_378;
    end
end

always @ (*) begin
    if (((icmp_ln171_reg_1223_pp0_iter19_reg == 1'd1) & (1'd1 == and_ln132_reg_1209_pp0_iter19_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        con_out_V_blk_n = con_out_V_full_n;
    end else begin
        con_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op275_write_state29 == 1'b1) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        con_out_V_write = 1'b1;
    end else begin
        con_out_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_478_ce = 1'b1;
    end else begin
        grp_fu_478_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_482_ce = 1'b1;
    end else begin
        grp_fu_482_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_486_ce = 1'b1;
    end else begin
        grp_fu_486_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_490_ce = 1'b1;
    end else begin
        grp_fu_490_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_494_ce = 1'b1;
    end else begin
        grp_fu_494_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_498_ce = 1'b1;
    end else begin
        grp_fu_498_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_502_ce = 1'b1;
    end else begin
        grp_fu_502_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_506_ce = 1'b1;
    end else begin
        grp_fu_506_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_510_ce = 1'b1;
    end else begin
        grp_fu_510_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_514_ce = 1'b1;
    end else begin
        grp_fu_514_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_519_ce = 1'b1;
    end else begin
        grp_fu_519_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_524_ce = 1'b1;
    end else begin
        grp_fu_524_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_529_ce = 1'b1;
    end else begin
        grp_fu_529_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_534_ce = 1'b1;
    end else begin
        grp_fu_534_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_539_ce = 1'b1;
    end else begin
        grp_fu_539_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_544_ce = 1'b1;
    end else begin
        grp_fu_544_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_549_ce = 1'b1;
    end else begin
        grp_fu_549_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_553_ce = 1'b1;
    end else begin
        grp_fu_553_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & ((icmp_ln98_fu_955_p2 == 1'd0) | (icmp_ln98_1_fu_613_p2 == 1'd0)))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_val_1_ce0 = 1'b1;
    end else begin
        line_buf_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_val_1_ce1 = 1'b1;
    end else begin
        line_buf_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_val_1_we1 = 1'b1;
    end else begin
        line_buf_val_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_val_2_ce0 = 1'b1;
    end else begin
        line_buf_val_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_val_2_ce1 = 1'b1;
    end else begin
        line_buf_val_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        line_buf_val_2_we1 = 1'b1;
    end else begin
        line_buf_val_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        output_buf_address1 = output_buf_addr_1_reg_1300_pp0_iter19_reg;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buf_address1 = sext_ln92_fu_599_p1;
    end else begin
        output_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_buf_ce0 = 1'b1;
    end else begin
        output_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_buf_ce1 = 1'b1;
    end else begin
        output_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
        output_buf_d1 = acc8_reg_1406;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_buf_d1 = 32'd0;
    end else begin
        output_buf_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln132_reg_1209_pp0_iter19_reg) & (ap_enable_reg_pp0_iter20 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln91_fu_582_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_buf_we1 = 1'b1;
    end else begin
        output_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (or_ln113_reg_1183 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        photo_in_V_blk_n = photo_in_V_empty_n;
    end else begin
        photo_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln113_reg_1183 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        photo_in_V_read = 1'b1;
    end else begin
        photo_in_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln101_fu_664_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        weights_blk_n = weights_empty_n;
    end else begin
        weights_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        weights_read = 1'b1;
    end else begin
        weights_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln90_fu_566_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln91_fu_582_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln98_1_fu_613_p2 == 1'd1) & (weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((icmp_ln98_1_fu_613_p2 == 1'd0) & (weights_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln100_fu_642_p2 == 1'd1) & (icmp_ln107_1_fu_659_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln107_1_fu_659_p2 == 1'd1) & (icmp_ln100_fu_642_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0)) & (icmp_ln101_fu_664_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter19 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter19 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter20 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & ((icmp_ln98_fu_955_p2 == 1'd0) | (icmp_ln98_1_fu_613_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln107_fu_757_p2 = (ap_phi_mux_indvar_flatten44_phi_fu_393_p4 + 64'd1);

assign add_ln149_1_fu_895_p2 = ($signed(32'd4294967295) + $signed(mul_ln149_reg_1290));

assign add_ln149_2_fu_900_p2 = (add_ln149_1_fu_895_p2 + select_ln107_reg_1173_pp0_iter1_reg);

assign add_ln149_fu_809_p2 = ($signed(31'd2147483647) + $signed(select_ln107_1_fu_729_p3));

assign add_ln171_fu_818_p2 = ($signed(31'd2147483647) + $signed(trunc_ln171_fu_815_p1));

assign add_ln90_fu_557_p1 = in_width_axi;

assign add_ln90_fu_557_p2 = ($signed(phi_mul_reg_289) + $signed(add_ln90_fu_557_p1));

assign add_ln92_fu_593_p2 = (phi_mul_reg_289 + j_0_reg_301);

assign add_ln98_fu_577_p0 = in_width_axi;

assign add_ln98_fu_577_p2 = ($signed(add_ln98_fu_577_p0) + $signed(32'd1));

assign and_ln132_fu_797_p2 = (icmp_ln132_fu_785_p2 & icmp_ln132_1_fu_791_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_pp0 = ((1'b1 == ap_block_pp0_stage0_subdone) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((con_out_V_full_n == 1'b0) & (ap_predicate_op275_write_state29 == 1'b1) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((or_ln113_reg_1183 == 1'd0) & (photo_in_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((con_out_V_full_n == 1'b0) & (ap_predicate_op275_write_state29 == 1'b1) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((or_ln113_reg_1183 == 1'd0) & (photo_in_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((con_out_V_full_n == 1'b0) & (ap_predicate_op275_write_state29 == 1'b1) & (ap_enable_reg_pp0_iter20 == 1'b1)) | ((or_ln113_reg_1183 == 1'd0) & (photo_in_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((or_ln113_reg_1183 == 1'd0) & (photo_in_V_empty_n == 1'b0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_pp0_stage0_iter20 = ((con_out_V_full_n == 1'b0) & (ap_predicate_op275_write_state29 == 1'b1));
end

always @ (*) begin
    ap_block_state7 = ((icmp_ln101_fu_664_p2 == 1'd0) & (weights_empty_n == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_260 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_369 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_operation_153 = (1'b1 == 1'b1);

assign ap_enable_operation_155 = (1'b1 == 1'b1);

assign ap_enable_operation_188 = (1'b1 == 1'b1);

assign ap_enable_operation_189 = (1'b1 == 1'b1);

assign ap_enable_operation_190 = (1'b1 == 1'b1);

assign ap_enable_operation_191 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_212 = (ap_predicate_op212_load_state11 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_220 = (ap_predicate_op220_load_state12 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_274 = (1'd1 == and_ln132_reg_1209_pp0_iter19_reg);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state10_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state11_pp0_iter2_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_enable_state12_pp0_iter3_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_enable_state29_pp0_iter20_stage0 = ((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state9_pp0_iter0_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_phi_mux_col_assign_phi_fu_340_p4 = col_assign_reg_336;

assign ap_phi_reg_pp0_iter0_con_win_val_2_2_reg_463 = 'bx;

always @ (*) begin
    ap_predicate_op212_load_state11 = ((1'd1 == and_ln132_reg_1209_pp0_iter1_reg) & (icmp_ln146_reg_1213_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op220_load_state12 = ((1'd1 == and_ln132_reg_1209_pp0_iter2_reg) & (icmp_ln146_reg_1213_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op275_write_state29 = ((icmp_ln171_reg_1223_pp0_iter19_reg == 1'd1) & (1'd1 == and_ln132_reg_1209_pp0_iter19_reg));
end

assign ap_ready = internal_ap_ready;

assign ch_fu_636_p2 = (zext_ln9878_reg_312 + 31'd1);

assign col_fu_830_p2 = (select_ln107_fu_721_p3 + 32'd1);

assign con_out_V_din = acc8_reg_1406;

assign con_win_val_0_1_3_fu_852_p3 = ((icmp_ln124_reg_1204[0:0] === 1'b1) ? 32'd0 : line_buf_val_1_q0);

assign i_1_fu_648_p2 = (row_assign_reg_324 + 2'd1);

assign i_fu_571_p2 = (i1_0_reg_278 + 31'd1);

assign icmp_ln100_fu_642_p2 = ((row_assign_reg_324 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln101_fu_664_p2 = ((col_assign_reg_336 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln107_1_fu_659_p2 = ((mul_ln96_fu_607_p2 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_847_p2 = ((add_ln107_fu_757_p2 == mul_ln96_fu_607_p2) ? 1'b1 : 1'b0);

assign icmp_ln108_1_fu_654_p2 = ((add_ln98_fu_577_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_836_p2 = ((col_fu_830_p2 == add_ln98_fu_577_p2) ? 1'b1 : 1'b0);

assign icmp_ln113_1_fu_746_p1 = in_width_axi;

assign icmp_ln113_1_fu_746_p2 = ((select_ln107_fu_721_p3 == icmp_ln113_1_fu_746_p1) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_741_p1 = in_width_axi;

assign icmp_ln113_fu_741_p2 = ((zext_ln107_fu_737_p1 == icmp_ln113_fu_741_p1) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_779_p2 = ((tmp_fu_769_p4 == 30'd0) ? 1'b1 : 1'b0);

assign icmp_ln132_1_fu_791_p2 = (($signed(select_ln107_fu_721_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_785_p2 = ((select_ln107_1_fu_729_p3 != 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln146_fu_803_p2 = ((zext_ln9878_reg_312 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_824_p2 = ((zext_ln9878_reg_312 == add_ln171_fu_818_p2) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_566_p1 = in_width_axi;

assign icmp_ln90_fu_566_p2 = (($signed(zext_ln90_fu_562_p1) < $signed(icmp_ln90_fu_566_p1)) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_582_p1 = in_width_axi;

assign icmp_ln91_fu_582_p2 = ((j_0_reg_301 == icmp_ln91_fu_582_p1) ? 1'b1 : 1'b0);

assign icmp_ln98_1_fu_613_p2 = (($signed(in_channel_axi) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_955_p2 = (($signed(zext_ln98_fu_952_p1) < $signed(in_channel_axi)) ? 1'b1 : 1'b0);

assign j_1_fu_670_p2 = (col_assign_reg_336 + 2'd1);

assign j_fu_587_p2 = (j_0_reg_301 + 32'd1);

assign line_buf_val_1_address0 = zext_ln729_fu_763_p1;

assign line_buf_val_1_address1 = line_buf_val_1_addr_reg_1192;

assign line_buf_val_2_address0 = zext_ln729_fu_763_p1;

assign line_buf_val_2_address1 = line_buf_val_2_addr_reg_1198;

assign mul_ln149_fu_886_p0 = mul_ln149_fu_886_p00;

assign mul_ln149_fu_886_p00 = add_ln149_reg_1218;

assign mul_ln149_fu_886_p1 = in_width_axi;

assign mul_ln149_fu_886_p2 = ($signed({{1'b0}, {mul_ln149_fu_886_p0}}) * $signed(mul_ln149_fu_886_p1));

assign mul_ln96_fu_607_p0 = zext_ln96_fu_604_p1;

assign mul_ln96_fu_607_p1 = zext_ln96_fu_604_p1;

assign mul_ln96_fu_607_p2 = (mul_ln96_fu_607_p0 * mul_ln96_fu_607_p1);

assign or_ln113_fu_751_p2 = (icmp_ln113_fu_741_p2 | icmp_ln113_1_fu_746_p2);

assign output_buf_address0 = sext_ln149_fu_905_p1;

assign row_fu_841_p2 = (select_ln107_1_fu_729_p3 + 31'd1);

assign select_ln107_1_fu_729_p3 = ((ap_phi_mux_icmp_ln10859_phi_fu_361_p4[0:0] === 1'b1) ? ap_phi_mux_row60_phi_fu_351_p4 : ap_phi_mux_row_045_phi_fu_382_p4);

assign select_ln107_fu_721_p3 = ((ap_phi_mux_icmp_ln10859_phi_fu_361_p4[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_col_assign_158_phi_fu_371_p4);

assign sext_ln149_fu_905_p1 = $signed(add_ln149_2_fu_900_p2);

assign sext_ln92_fu_599_p1 = $signed(add_ln92_fu_593_p2);

assign start_out = real_start;

assign tmp_fu_769_p4 = {{select_ln107_1_fu_729_p3[30:1]}};

assign tmpp_2_fu_910_p3 = ((icmp_ln146_reg_1213_pp0_iter2_reg[0:0] === 1'b1) ? tmpp_3_reg_1006 : output_buf_q0);

assign trunc_ln171_fu_815_p1 = in_channel_axi[30:0];

assign zext_ln107_fu_737_p1 = select_ln107_1_fu_729_p3;

assign zext_ln729_fu_763_p1 = select_ln107_fu_721_p3;

assign zext_ln90_fu_562_p1 = i1_0_reg_278;

assign zext_ln96_fu_604_p1 = add_ln98_fu_577_p2;

assign zext_ln98_fu_952_p1 = ch_reg_1141;

endmodule //Loop_2_proc5
